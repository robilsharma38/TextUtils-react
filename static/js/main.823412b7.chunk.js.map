{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","role","htmlFor","TextForm","useState","text","setText","style","color","heading","onChange","event","target","value","rows","background","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","length","Alert","alert","word","lower","charAt","slice","capitalize","msg","defaultProps","aboutText","App","setmode","setAlert","message","setTimeout","body","backgroundColor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.823412b7.chunk.js","sourcesContent":["import Proptypes from \"prop-types\";\n// import { Link } from \"react-router-dom\";\n\nexport default function Navbar(props) {\n  return (\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\n      <div className=\"container-fluid\">\n        <a className=\"navbar-brand\" href=\"#\">\n          {props.title}\n        </a>\n        <button\n          className=\"navbar-toggler\"\n          type=\"button\"\n          data-bs-toggle=\"collapse\"\n          data-bs-target=\"#navbarSupportedContent\"\n          aria-controls=\"navbarSupportedContent\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n            <li className=\"nav-item\">\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\n                Home\n              </a>\n            </li>\n            {/* <li className=\"nav-item\">\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"/about\">\n                {props.aboutText}\n              </a>\n            </li> */}\n          </ul>\n          {/* <form className=\"d-flex\">\n            <input\n              className=\"form-control me-2\"\n              type=\"search\"\n              placeholder=\"Search\"\n              aria-label=\"Search\"\n            />\n            <button className=\"btn btn-outline-success\" type=\"submit\">\n              Search\n            </button>\n          </form> */}\n          <div className=\"form-check form-switch\">\n            <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" />\n            <label className={`form-check-label text-${props.mode === 'dark'?'light':'dark'}`} htmlFor=\"flexSwitchCheckDefault\">Disable {props.mode}Mode</label>\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n\nNavbar.propTypes = { title: Proptypes.string.isRequired, about: Proptypes.string };\n\nNavbar.defaultProps = { title: \"Title here\", aboutText: \"About here\" };\n","import React,{useState} from 'react';\nimport propTypes from 'prop-types';\n\nexport default function TextForm(props){\n    const [text,setText] = useState(\"\");\n\n    const handleUpClick = () => {\n        let newText = text.toUpperCase();\n        setText(newText);\n        props.showAlert(\"Converted to uppercase!\",\"success\");\n    }\n\n    const handleLowClick = () => {\n        let newText = text.toLowerCase();\n        setText(newText);\n        props.showAlert(\"Converted to lowercase!\",\"success\");\n    }\n\n    const handleOnChange = (event) => {\n        setText(event.target.value);\n    }\n\n    const handleCopy = () => {\n        let text = document.getElementById('myBox');\n        text.select();\n        navigator.clipboard.writeText(text.value);\n        props.showAlert(\"Text is copied!\",\"success\");\n    }\n\n    const handleExtraSpaces = () => {\n        let newText = text.split(/[  ]+/);\n        setText(newText.join(\" \"));\n        props.showAlert(\"Extra space is removed\",\"success\");\n    }\n\n    return(\n        <>\n            <div className=\"container\" style={{color:props.mode === 'dark'?'white':'black'}}>\n                <h1>{props.heading}</h1>\n                <div className=\"mb-3\">\n                    <textarea className=\"form-control\" id=\"myBox\" onChange={handleOnChange} value={text} rows=\"8\" style={{background: props.mode === 'dark'?'grey':'white',color:props.mode === 'dark'?'white':'black'}}></textarea>\n                </div>\n                <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>Convert to Uppercase</button>\n                <button className=\"btn btn-primary mx-2\" onClick={handleLowClick}>Convert to LowerCase</button>\n                <button className=\"btn btn-primary mx-2\" onClick={handleCopy}>Copy Text</button>\n                <button className=\"btn btn-primary mx-2\" onClick={handleExtraSpaces}>Remove Extra Space</button>\n            </div>\n            <div className=\"container my-3\" style={{color:props.mode === 'dark'?'white':'black'}}>\n                <h1>Your text summary</h1>\n                <p>{text.split(\" \").length} words and {text.length} characters</p>\n                <p>{0.008 * text.split(\" \").length} Minutes to read</p>\n                <h2>Preview</h2>\n                <p>{text.length>0?text:\"Enter your text to preview here\"}</p>\n            </div>\n        </>\n    )\n}\n\nTextForm.propTypes = { heading: propTypes.string};","import React from 'react';\n\nexport default function Alert(props){\n    \n    const capitalize = (word) => {\n        const lower = word.toLowerCase();\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\n    }\n\n    return(\n        props.alert && <>\n             <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\n            <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\n            </div>\n        </>\n    );\n}","import './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport Alert from './components/Alert';\n// import About from './components/About';\nimport React, {useState} from 'react';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n// } from \"react-router-dom\";\n\nfunction App() {\n\n  const [mode, setmode] = useState(\"light\");\n  const [alert, setAlert] = useState(null)\n\n  const showAlert = (message,type) => {\n      setAlert({\n        msg:message,\n        type:type,\n      })\n      setTimeout(() => {\n        setAlert(null);\n      }, 1500);\n  }\n\n  const toggleMode = () => {\n      if(mode === \"light\")\n      {\n        setmode(\"dark\");\n        document.body.style.backgroundColor = '#042743';\n        showAlert(\"Dark mode has been enabled\",\"success\")\n        document.title = \"TextUtils - Dark Mode\";\n      }\n      else\n      {\n        setmode(\"light\");\n        document.body.style.backgroundColor = 'white';\n        showAlert(\"Light mode has been enabled\",\"success\")\n        document.title = \"TextUtils - Light Mode\";\n      }\n  }\n\n  return (\n    <>\n    {/* <Router> */}\n      <Navbar title=\"TextUtils\" aboutText=\"About Utils\" mode={mode} toggleMode={toggleMode}/>\n      <Alert alert={alert}/>\n      <div className=\"container my-3\">\n          {/* <Switch> */}\n            {/* <Route exact path=\"/about\">\n              <About />\n            </Route> */}\n            {/* <Route exact path=\"/\"> */}\n              <TextForm heading=\"Enter the text to analyze\" mode={mode} showAlert={showAlert}/>\n            {/* </Route> */}\n          {/* </Switch> */}\n      </div>\n    {/* </Router> */}\n    \n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}